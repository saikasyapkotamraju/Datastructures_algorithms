There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].
A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).
Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.

Solution :
Terminal node : A node which does not have any outgoing edges but only incoming edges is called terminal node.
Safe node : Node which is a terminal node or from which all outgoing edges leading to terminal nodes is called safe node. A terminal node itself is a 
            safe node. (Logic is a node which is not part of cycle or which does not lead to cycle is a safe node)

class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int v = graph.length;
        boolean[] vis = new boolean[v], pathVis = new boolean[v], result = new boolean[v];

        for(int i=0; i<v; i++)
        {
            if(!vis[i])
            {
                dfs(i, graph, vis, pathVis, result);
            }
        }

        List<Integer> res = new ArrayList<>();
        for(int i=0; i<v; i++)
        {
            if(result[i])
            {
                res.add(i);
            }
        }
        return res;
    }

    public boolean dfs(int node, int[][] graph, boolean[] vis, boolean[] pathVis, boolean[] result)
    {
        vis[node] = true;
        pathVis[node] = true;
        for(int adj : graph[node])
        {
            if(!vis[adj])
            {
                if(dfs(adj, graph, vis, pathVis, result))
                {
                    return true;
                }
            }
            if(pathVis[adj])
            {
                return true;
            }
        }
        pathVis[node] = false;
        result[node] = true;
        return false;
    }
}
