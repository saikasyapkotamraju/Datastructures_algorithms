A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.

Given a row x col grid of integers, how many 3 x 3 contiguous magic square subgrids are there?

Note: while a magic square can only contain numbers from 1 to 9, grid may contain numbers up to 15.

 

Example 1:


Input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]
Output: 1
Explanation: 
The following subgrid is a 3 x 3 magic square:

while this one is not:

In total, there is only one magic square inside the given grid.
Example 2:

Input: grid = [[8]]
Output: 0
 

Constraints:

row == grid.length
col == grid[i].length
1 <= row, col <= 10
0 <= grid[i][j] <= 15

My solution :

class Solution {
    public int helper(int[][] grid, int r, int c)
    {
        boolean[] nums = new boolean[10];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                int num = grid[r + i][c + j];
                if (num < 1 || num > 9 || nums[num]) return 0;
                nums[num] = true;
            }
        }
        int sum = 0;
        for(int i=c; i<c+3; i++)
        {
            sum += grid[r][i];
        }
        for(int i=r+1; i<r+3; i++)
        {
            int rowSum = 0;
            for(int j=c; j<c+3; j++)
            {
                rowSum += grid[i][j];
            }
            if(rowSum!=sum)return 0;
        }
        for(int i=c; i<c+3; i++)
        {
            int colSum = 0;
            for(int j=r; j<r+3; j++)
            {
                colSum += grid[j][i];
            }
            if(colSum!=sum) return 0;
        }
        int diagSum1 = 0, diagSum2 = 0;
        diagSum1 += grid[r][c] + grid[r+2][c+2] + grid[r+1][c+1];
        diagSum2 += grid[r][c+2] + grid[r+1][c+1] + grid[r+2][c];
        if(diagSum1!=sum || diagSum2!=sum)return 0;
        return 1;
    }
    public int numMagicSquaresInside(int[][] grid) {
        int res = 0;
        for(int i=0; i<grid.length-2; i++)
        {
            for(int j=0; j<grid[0].length-2; j++)
            {
                res += helper(grid, i, j);
            }
        }
        return res;
    }
}
