Given the root of a binary tree, return the length of the diameter of the tree.
The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
The length of a path between two nodes is represented by the number of edges between them.

Solution
We can use maximum depth of binary tree logic to this sum. At every node we will update result with maximum diameter of the path that is passing
through the current node from left and right sides of it. After updating the result, we will pass sum of 1 plus maximum depth (either from right or 
left) to upper levels, as they expect maximum depth possible from their sub trees.
class Solution {
    int result = Integer.MIN_VALUE;
    public int diameterOfBinaryTree(TreeNode root) {
        helper(root);
        return result!=Integer.MIN_VALUE ? result : 0;
    }

    int helper(TreeNode root){
        if(root==null)return 0;
        int lh = helper(root.left);
        int rh = helper(root.right);
        result = Math.max(result, lh+rh);
        return Math.max(lh, rh) + 1;
    }
}
