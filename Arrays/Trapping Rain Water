Given an array arr[] with non-negative integers representing the height of blocks. If the width of each block is 1, compute how much water can be trapped between the blocks during the rainy season. 

Solution :

class Solution {
    public int maxWater(int arr[]) {
        int n = arr.length;
        int result = 0;
        if(n==0)return result;
        int[] rightMax = new int[n];
        int[] leftMax = new int[n];
        
        int right_max = arr[n-1];
        int left_max = arr[0];
        rightMax[n-1] = -1;
        leftMax[0] = arr[0];
    
        for(int i=n-2; i>=0; i--)
        {
            rightMax[i] = right_max;
            if(arr[i]>right_max)
            {
                right_max = arr[i];
            }
        }
        
        for(int i=1; i<n; i++)
        {
            if(arr[i]>left_max)
            {
                left_max = arr[i];
            }
            leftMax[i] = left_max;
        }
        
        for(int i=0; i<n; i++)
        {
            int minHeight = Math.min(rightMax[i], leftMax[i]);
            int trappedWater = minHeight - arr[i];
            if(trappedWater>0)
            {
                result += trappedWater;
            }
        }
        
        return result;
        
    }
}
