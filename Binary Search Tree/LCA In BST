Given a Binary Search Tree (with all values unique) and two node values n1 and n2 (n1!=n2). Find the Lowest Common Ancestors of the two nodes in the BST.

Solution :

If both values are less than the current node's value, move to the left child.
If both values are greater than the current node's value, move to the right child.
If one value is less than and other one is greater than or any one is equal to the current node's value, return that node as it is the LCA.

class BST {
    // Function to find the lowest common ancestor in a BST.
    Node LCA(Node root, int n1, int n2) {
        // code here.
        if(root==null)return null;
        if(n1<root.data && n2<root.data)
        {
            return LCA(root.left, n1, n2);
        }
        else if(n1>root.data && n2>root.data)
        {
            return LCA(root.right, n1, n2);
        }
        else
        {
            return root;
        }
    }
}
