A valid parentheses string is either empty "", "(" + A + ")", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.

For example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings.
A valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.

Given a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.

Return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.

 

Example 1:

Input: s = "(()())(())"
Output: "()()()"
Explanation: 
The input string is "(()())(())", with primitive decomposition "(()())" + "(())".
After removing outer parentheses of each part, this is "()()" + "()" = "()()()".
Example 2:

Input: s = "(()())(())(()(()))"
Output: "()()()()(())"
Explanation: 
The input string is "(()())(())(()(()))", with primitive decomposition "(()())" + "(())" + "(()(()))".
After removing outer parentheses of each part, this is "()()" + "()" + "()(())" = "()()()()(())".
Example 3:

Input: s = "()()"
Output: ""
Explanation: 
The input string is "()()", with primitive decomposition "()" + "()".
After removing outer parentheses of each part, this is "" + "" = "".
 

Constraints:

1 <= s.length <= 105
s[i] is either '(' or ')'.
s is a valid parentheses string.

Solution (Naive) : 
class Solution {
    public String removeOuterParentheses(String s) {
        if(s==null || s.length()==0) return s;

        int n = s.length();
        int start = 0, open = 0, close = 0;
        
        String result = "";

        for(int i=0; i<n; i++)
        {
            char currChar = s.charAt(i);
            if(currChar == '(')open++;
            if(currChar == ')')close++;
            if(open == close)
            {
                result += s.substring(start+1, i);
                start = i + 1;
            }
        }
        return result;
    }
}

Solution (Optimised)

class Solution {
    public String removeOuterParentheses(String s) {
        if(s==null || s.length()==0) return s;

        int n = s.length();
        int flag = 0;
        
        StringBuilder result = new StringBuilder();

        for(int i=0; i<n; i++)
        {
            char currChar = s.charAt(i);
            if(currChar == '(')
            {
                if(flag!=0) //Skips first '(' character in every primitive parenthesis
                {
                    result.append(currChar);
                }
                flag++;
            }

            if(currChar == ')')
            {
                flag--;
                if(flag>0) //Skips last ')' character in every primitive parenthesis
                {
                    result.append(currChar);
                }
            }

        }
        return result.toString();
    }
}
