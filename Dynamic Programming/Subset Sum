In a given array, check if there exists a subset whose sum is equal to a given target. 

Solution 1(Recursive) : 

public static boolean isSubsetPresent(int[] arr, int target, int n)
    {
        if(target==0)return true;
        if(n==0)return false;

        if(arr[n-1] <= target)
        {
            return isSubsetPresent(arr, target-arr[n-1], n-1);
        }
        return isSubsetPresent(arr, target, n-1);
    }

Solution 2(DP) : 

public static boolean isSubsetPresent(int[] arr, int target, int n)
    {
        int[][] dp = new int[n+1][target+1];
        
        for(int i=0; i<=n; i++)
        {
            for(int j=0; j<=target; j++)
            {
                if(i==0)dp[i][j] = 0;
                if(j==0) dp[i][j] = 1;
            }
        }
        
        for(int i=1; i<=n; i++)
        {
            for(int j=1; j<=target; j++)
            {
                if(arr[i-1]<=j)
                {
                    dp[i][j] = dp[i-1][j-arr[i-1]];
                }
                else
                {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        
        return dp[n][target] == 0 ? false : true;
    }
