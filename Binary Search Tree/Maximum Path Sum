A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.
The path sum of a path is the sum of the node's values in the path.
Given the root of a binary tree, return the maximum path sum of any non-empty path.

Solution 
We can use maximum depth of binary tree logic for this sum. At every node we will update result with the path passing through the current node
from both left and right directions of it. After updating result we will pass sum of current node and maximum path (either left or right) to the 
upper levels as they expect maximum paths from their sub trees.
class Solution {
    int result = Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
        helper(root);
        return result;
    }

    public int helper(TreeNode root)
    {
        if(root==null)return 0;

        int leftMax = Math.max(0, helper(root.left));
        int rightMax = Math.max(0, helper(root.right));

        result = Math.max(result, leftMax + rightMax + root.val);

        return Math.max(leftMax, rightMax) + root.val;
    }
}
