You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int totSum=0, newTarget=0;
        for(int num : nums)
        {
            totSum+=num;
        }
        if((totSum-target)%2!=0 || totSum<target) return 0;
        newTarget = (totSum-target)/2;
        int[][] dp = new int[nums.length+1][newTarget+1];
        dp[0][0] = 1;
        for(int i=1; i<nums.length+1; i++)
        {
            for(int j=0; j<newTarget+1; j++)
            {
                if(nums[i-1]<=j)
                {
                    dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i-1]];
                }
                else
                {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }

        return dp[nums.length][newTarget];

        
    }
}
