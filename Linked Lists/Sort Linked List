Given the head of a linked list, return the list after sorting it in ascending order.

Solution
class Solution {
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) return head;
        return helper(head);
    }

    public ListNode helper(ListNode root) {
        // Base case: 1 or 0 nodes, no sorting needed
        if (root == null || root.next == null) {
            return root;
        }

        // Get mid and split
        ListNode midNode = getMidNode(root);
        ListNode secondHead = midNode.next;
        midNode.next = null; // Break the link

        // Recursively sort halves
        ListNode sortedFirstHead = helper(root);
        ListNode sortedSecondHead = helper(secondHead);

        // Merge sorted halves
        return merge(sortedFirstHead, sortedSecondHead);
    }

    public ListNode getMidNode(ListNode head) {
        if (head == null || head.next == null) return head;
        ListNode slow = head, fast = head;
        // Move slow to mid, fast to end (or near end)
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    public ListNode merge(ListNode first, ListNode second) {
        if (first == null) return second;
        if (second == null) return first;

        // Dummy node to simplify merging
        ListNode dummy = new ListNode(0); // Temporary head
        ListNode res = dummy;             // Moving pointer

        ListNode cur1 = first, cur2 = second;
        while (cur1 != null && cur2 != null) {
            if (cur1.val < cur2.val) {
                res.next = cur1;
                cur1 = cur1.next;
            } else {
                res.next = cur2;
                cur2 = cur2.next;
            }
            res = res.next;
        }

        // Attach remaining nodes
        if (cur1 != null) 
        {
            res.next = cur1;
        }
        if (cur2 != null) 
        {
            res.next = cur2;
        }
        return dummy.next; // Return real head, not dummy
    }
}
