You are given an undirected weighted graph of n nodes (0-indexed), represented by an edge list where edges[i] = [a, b] is an undirected edge connecting the nodes a and b with a probability of success of traversing that edge succProb[i].

Given two nodes start and end, find the path with the maximum probability of success to go from start to end and return its success probability.

If there is no path from start to end, return 0. Your answer will be accepted if it differs from the correct answer by at most 1e-5.

 

Example 1:



Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2
Output: 0.25000
Explanation: There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.
Example 2:



Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2
Output: 0.30000
Example 3:



Input: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2
Output: 0.00000
Explanation: There is no path between 0 and 2.
 

Constraints:

2 <= n <= 10^4
0 <= start, end < n
start != end
0 <= a, b < n
a != b
0 <= succProb.length == edges.length <= 2*10^4
0 <= succProb[i] <= 1
There is at most one edge between every two nodes.

My solution : 
class Solution {
    public double maxProbability(int n, int[][] edges, double[] succProb, int start_node, int end_node) {
        double[] max_prob = new double[n]; // This will contain max path value for every node from start_node
        max_prob[start_node] = 1.0; // This will ensure that every node value in max_prob is calculated from start_node
        for(int i=0; i<n-1; i++) // As we are iterating through every node, we can able to develop path to every node from start_node
        {
            boolean isUpdated = false;
            for(int j=0; j<edges.length; j++)
            {
                int u = edges[j][0];
                int v = edges[j][1];
                double prob = succProb[j];
                if(max_prob[u]*prob > max_prob[v])
                {
                    max_prob[v] = max_prob[u]*prob;
                    isUpdated = true;
                }
                if(max_prob[v]*prob > max_prob[u])
                {
                    max_prob[u] = max_prob[v]*prob;
                    isUpdated = true;
                }
            }
            if(!isUpdated)break;
        }
        return max_prob[end_node];
    }
}
