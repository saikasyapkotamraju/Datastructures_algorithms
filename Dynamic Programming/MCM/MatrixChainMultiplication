Given an array arr[] which represents dimensions of sequence of matrices where the ith matrix has the dimensions (arr[i-1] x arr[i]) for i>=1., find the most efficient way to multiply these matrices together. The efficient way is the one that involves the least number of multiplications.

Solution 1(Recursion with memoisation)
class Solution {
    static int matrixMultiplication(int arr[]) {
        int n = arr.length;
        int[][] memo = new int[n][n];
        for(int i=0; i<n; i++)
        {
            Arrays.fill(memo[i], -1);
        }
        return helper(arr, 1, n-1, memo);
    }
    
    public static int helper(int[] arr, int i, int j, int[][] memo)
    {
        if(i==j)return 0;
        if(memo[i][j]!=-1)return memo[i][j];
        
        int computations = Integer.MAX_VALUE;
        for(int k=i; k<j; k++)
        {
            int cost1 = arr[i-1] * arr[k] * arr[j];
            int cost2 = helper(arr, i, k, memo);
            int cost3 = helper(arr, k+1, j, memo);
            int totCost = cost1 + cost2 + cost3;
            computations = Math.min(computations, totCost);
        }
        
        memo[i][j] = computations;
        return memo[i][j];
    }
}

Solution 2(DP):
class Solution {
    static int matrixMultiplication(int arr[]) {
        int n = arr.length;
        int[][] dp = new int[n][n];
        for(int i=0; i<n; i++)
        {
            dp[i][i] = 0;
        }
        for(int i=n-1; i>=1; i--)
        {
            for(int j=i+1; j<n; j++)
            {
                int computations = Integer.MAX_VALUE;
                for(int k=i; k<j; k++)
                {
                    int cost1 = arr[i-1] * arr[k] * arr[j];
                    int cost2 = dp[i][k] + dp[k+1][j];
                    int totCost = cost1 + cost2;
                    computations = Math.min(computations, totCost);
                }
                dp[i][j] = computations;
            }
        }
        
        return dp[1][n-1]; //For the first matrix the dimensions are at index 0 and 1
    }
}
