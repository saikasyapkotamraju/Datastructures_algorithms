Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character


Solution 1(Recursion with memoisation)

import java.util.Arrays;
class Solution {
    public int minDistance(String word1, String word2) {
        int n = word1.length(), m = word2.length();
        int[][] memo = new int[n+1][m+1];
        for(int i=0; i<n+1; i++)
        {
            Arrays.fill(memo[i], -1);
        }
        return minDist(word1, word2, n, m, memo);
    }

    public int minDist(String s1, String s2, int n, int m, int[][] memo)
    {
        if(n==0 || m==0)return n+m;
        if(memo[n][m]!=-1)return memo[n][m];
        if(s1.charAt(n-1)==s2.charAt(m-1))
        {
            memo[n][m] =  minDist(s1, s2, n-1, m-1, memo);
        }
        else
        {
            memo[n][m] =  1 + Math.min(minDist(s1, s2, n-1, m, memo),  //Deletion of character
                            Math.min(minDist(s1, s2, n, m-1, memo), minDist(s1, s2, n-1, m-1, memo)));
        }                    //Addition of character                //Replacement of character
        return memo[n][m];
    }
}

Solution 2(DP)

import java.util.Arrays;
class Solution {
    public int minDistance(String word1, String word2) {
        int n = word1.length(), m = word2.length();
        int[][] dp = new int[n+1][m+1];
        for(int i=0; i<m+1; i++)
        {
            dp[0][i] = i;
        }
        for(int i=0; i<n+1; i++)
        {
            dp[i][0] = i;
        }
        for(int i=1; i<n+1; i++)
        {
            for(int j=1; j<m+1; j++)
            {
                if(word1.charAt(i-1)==word2.charAt(j-1))
                {
                    dp[i][j] = dp[i-1][j-1];
                }
                else
                {
                    dp[i][j] = 1 + Math.min(dp[i-1][j-1], 
                                    Math.min(dp[i][j-1], dp[i-1][j]));
                }
            }
        }

        return dp[n][m];
    }
}
