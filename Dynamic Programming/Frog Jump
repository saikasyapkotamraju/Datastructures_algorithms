Given an integer array height[] where height[i] represents the height of the i-th stair, a frog starts from the first stair and wants to reach the top. 
From any stair i, the frog has two options: it can either jump to the (i+1)th stair or the (i+2)th stair. The cost of a jump is the absolute difference in height between the two stairs. 
Determine the minimum total cost required for the frog to reach the top.

Solution 1 (Recursive with memoisation)

class Solution {
    public int minCost(int[] height) {
    int n = height.length;
    int[] memo = new int[n];
    for(int i=0; i<n; i++)
    {
        memo[i] = -1;
    }
    return frogjump(height, n-1, memo);
}

public int frogjump(int[] height, int n, int[] memo)
{
    if(n==0)return 0;
    if(memo[n]!=-1)return memo[n];
    int minCost1 = Integer.MAX_VALUE;
    int minCost2 = Integer.MAX_VALUE;
    if(n>0)
    {
        minCost1 = Math.min(minCost1, frogjump(height, n-1, memo) + Math.abs(height[n]-height[n-1]));
    }
    if(n>1)
    {
        minCost2 = Math.min(minCost2, frogjump(height, n-2, memo) + Math.abs(height[n]-height[n-2]));
    }
    memo[n] = Math.min(minCost1, minCost2);
    return memo[n];
}
}

Solution 2 (DP):
public int minCost(int[] height) 
    {
        if(height.length==0 || height.length==1)return 0;
        int[] dp = new int[height.length];
        dp[0] = 0;
        dp[1] = Math.abs(height[1] - height[0]);
        for(int i=2; i<height.length; i++)
        {
            int minCost1 = dp[i-1] + Math.abs(height[i] - height[i-1]);
            int minCost2 = dp[i-2] + Math.abs(height[i] - height[i-2]);
            dp[i] = Math.min(minCost1, minCost2);
        }
        
        return dp[height.length-1];
    }
