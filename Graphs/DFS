Given a connected undirected graph represented by an adjacency list adj, which is a vector of vectors where each adj[i] represents the list of vertices connected to vertex i. Perform a Depth First Traversal (DFS) starting from vertex 0, visiting vertices from left to right as per the adjacency list, and return a list containing the DFS traversal of the graph.

Note: Do traverse in the same order as they are in the adjacency list.

Solution :

class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(ArrayList<ArrayList<Integer>> adj) {
        int totalNodes = adj.size();
        boolean[] visited = new boolean[totalNodes];
        ArrayList<Integer> result = new ArrayList<>();
        
        for(int i=0; i<totalNodes; i++)
        {
            if(!visited[i])
            {
                dfs(i, adj, visited, result);
            }
        }
        
        return result;
    }
    
    public void dfs(int node, ArrayList<ArrayList<Integer>> adj, boolean[] visited, ArrayList<Integer> result)
    {
        visited[node] = true;
        result.add(node);
        for(int adjNode : adj.get(node))
        {
            if(!visited[adjNode])
            {
                dfs(adjNode, adj, visited, result);
            }
        }
    }
}
