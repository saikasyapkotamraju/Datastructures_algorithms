Stack is a data structure that follows the LIFO (Last in First out) principle. Design and implement a stack to implement the following functions:

1. Push(num): Push the given number in the stack if the stack is not full.

2. Pop: Remove and print the top element from the stack if present, else print -1.

3. Top: Print the top element of the stack if present, else print -1.

4. isEmpty: Print 1 if the stack is empty, else print 0.

5. isFull: Print 1 if the stack is full, else print 0.

Solution : 

public class Solution{
    static class Stack {
        int currIndex = -1;
        int[] stack;
        Stack(int capacity) {
            // Write your code here.
            stack = new int[capacity];
        }
        public void push(int num) {
            // Write your code here.
            if(currIndex+1 < stack.length)
            {
                currIndex++;
                stack[currIndex] = num;
            }
        }
        public int pop() {
            // Write your code here.
            if(currIndex>=0)
            {
                int ele = stack[currIndex];
                currIndex--;
                return ele;
            }
            return -1;
            
        }
        public int top() {
            // Write your code here.
            if(currIndex>=0)
            {
                return stack[currIndex];
            }
            return -1;
        }
        public int isEmpty() {
            // Write your code here.
            return currIndex == -1 ? 1 : 0;
        }
        public int isFull() {
            // Write your code here.
            return currIndex == stack.length-1 ? 1 : 0;
        }
    }
}
