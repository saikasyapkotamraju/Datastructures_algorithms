Given a matrix where each cell in the matrix can have values 0, 1 or 2 which has the following meaning:
0 : Empty cell
1 : Cells have fresh oranges
2 : Cells have rotten oranges

We have to determine what is the earliest time after which all the oranges are rotten. A rotten orange at index [i, j] can rot other fresh orange at indexes [i-1, j], [i+1, j], [i, j-1], [i,j+1] (up, down, left and right) in unit time.

Note: Your task is to return the minimum time to rot all the fresh oranges. If not possible returns -1.

Solution :

class Solution {
    public int orangesRotting(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;

        // boolean[][] visited = new boolean[rows][cols];
        int maxTime = Integer.MIN_VALUE;
        Queue<int[]> queue = new LinkedList<>();
        int freshOranges = 0;
        for(int i=0; i<rows; i++)
        {
            for(int j=0; j<cols; j++)
            {
                if(grid[i][j]==2)
                {
                    queue.offer(new int[]{i, j, 0});
                    // visited[i][j] = true;
                }
                if(grid[i][j]==1)freshOranges++;
            }
        }

        if(freshOranges==0)return 0;
        
        while(!queue.isEmpty())
        {
            int[] rotOrange = queue.poll();
            int row = rotOrange[0], col = rotOrange[1], time = rotOrange[2];
            maxTime = Math.max(maxTime, time);
            int[] dirX = {0, 1, 0, -1};
            int[] dirY = {-1, 0, 1, 0};

            for(int delta=0; delta<4; delta++)
            {
                int newRow = row + dirX[delta];
                int newCol = col + dirY[delta];
                if(newRow>=0 && newRow<rows && newCol>=0 && newCol<cols)
                {
                    if(grid[newRow][newCol]==1)
                    {
                        freshOranges--;
                        // visited[newRow][newCol] = true;
                        grid[newRow][newCol] = 2;
                        queue.offer(new int[]{newRow, newCol, time+1});
                    }
                }
            }
        }

        if(freshOranges!=0)return -1;

        return maxTime;
    }
}
