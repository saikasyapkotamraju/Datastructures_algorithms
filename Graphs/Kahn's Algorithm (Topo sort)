Given a Directed Acyclic Graph (DAG) of V (0 to V-1) vertices and E edges represented as a 2D vector edges[][], where each entry edges[i] = [u, v] denotes an directed edge u -> v. Return topological sort for the given graph.
Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge u -> v, vertex u comes before v in the ordering.
Note: As there are multiple Topological orders possible, you may return any of them. If your returned Topological sort is correct then the output will be 1 else 0.

Solution :
Algorithm : Nodes with zero indegree should be present first in topo order as they are starting points to other nodes
class Solution {
    public static ArrayList<Integer> topoSort(int V, int[][] edges) {
        // code here
        int[] indegree = new int[V];
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>(V);
        for(int i=0; i<V; i++)adj.add(new ArrayList<>());
        for(int[] edge : edges)
        {
            adj.get(edge[0]).add(edge[1]);
            indegree[edge[1]]++;
        }
        
        ArrayList<Integer> result = new ArrayList<>();
        Queue<Integer> queue = new LinkedList<>();
        
        for(int i=0; i<indegree.length; i++)
        {
            if(indegree[i]==0)queue.offer(i);
        }
        
        while(!queue.isEmpty())
        {
            int node = queue.poll();
            result.add(node);
            
            for(int adjNode : adj.get(node))
            {
                indegree[adjNode]--;
                if(indegree[adjNode]==0)queue.offer(adjNode);
            }
        }
        
        return result;
    }
}
