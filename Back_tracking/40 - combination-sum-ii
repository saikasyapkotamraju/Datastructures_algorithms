Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 

Constraints:

1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30

My solution : 
class Solution {
    public void helper(int[] candidates, List<List<Integer>> res, int ind, int tot, List<Integer> output, int target)
    {
        if(tot>target)return ;
        if(tot==target)
        {
            res.add(new ArrayList<>(output));
            return ;
        }
        for(int i=ind; i<candidates.length; i++)
        {
            if(i>ind && candidates[i]==candidates[i-1])continue;
            output.add(candidates[i]);
            helper(candidates, res, i+1, tot+candidates[i], output, target);
            output.remove(output.size()-1);
        }
    }
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates);
        helper(candidates, res, 0, 0, new ArrayList<>(), target);
        return res;
    }
}

My Logic : 
if(i>ind && candidates[i]==candidates[i-1])continue; 
the above statement is useful to exclude duplicate elements processing. For Example take input arr = {1,1,2,2} target = 5.
In back tracking first we will consider element 1(index=0) and then we iterate through remaining sub array to find out elements which will sum up with 
1 and equals to target. So here we will get one sub array {1,2,2}.
After processing 1(index=0) we will move on to next index(index=1) and repeat the same process. But in this iteration we will get a subarray
{1,2,2}. Now duplicate sub arrays generated. 
So to avoid these type of cases, we need that if check.
