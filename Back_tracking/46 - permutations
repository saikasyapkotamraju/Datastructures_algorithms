Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.

My solution : 
class Solution {
    public void helper(int[] nums, List<List<Integer>> res, int ind, List<Integer> output)
    {
        if(output.size()==nums.length)
        {
            res.add(new ArrayList<>(output));
            return;
        }
        for(int num : nums)
        {
            if(output.contains(num))continue;
            output.add(num);
            helper(nums, res, ind+1, output);
            output.remove(output.size()-1);
        }
    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        helper(nums, res, 0, new ArrayList<>());
        return res;
    }
}
