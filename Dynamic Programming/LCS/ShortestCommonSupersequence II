Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.

A string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.

class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        int n = str1.length(), m = str2.length();
        int[][] dp = new int[n+1][m+1];
        for(int i=1; i<n+1; i++)
        {
            for(int j=1; j<m+1; j++)
            {
                if(str1.charAt(i-1)==str2.charAt(j-1))
                {
                    dp[i][j] = 1 + dp[i-1][j-1];
                }
                else
                {
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }

        int i=n, j=m;
        StringBuilder sb = new StringBuilder();
        while(i>0 && j>0)
        {
            if(str1.charAt(i-1)==str2.charAt(j-1))
            {
                sb.append(str1.charAt(i-1));
                i--;
                j--;
            }
           // When characters at i-1 and j-1 are not equal, we need to decide which character to include in the SCS. 
          //The decision is based on which character leads to a shorter overall SCS. By appending the character that leads to the longer LCS in the remaining part of the strings, 
          //we ensure that the resulting SCS is the shortest possible.
          //As we are constructing supersequence we need all other characters also(which not comes in lcs), so if we append character leading to
          //shortest lcs we might miss some other characters. We need to append character leading to longest lcs.
            else
            {
                if(dp[i-1][j]>dp[i][j-1])
                {
                    sb.append(str1.charAt(i-1));
                    i--;
                }
                else
                {
                    sb.append(str2.charAt(j-1));
                    j--;
                }
            }
        }

        while(i>0)
        {
            sb.append(str1.charAt(i-1));
            i--;
        }
        while(j>0)
        {
            sb.append(str2.charAt(j-1));
            j--;
        }

        return sb.reverse().toString();
    }
}
