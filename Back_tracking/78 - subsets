Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

My solution : 
class Solution {
    public void helper(int[] nums, List<List<Integer>> res, List<Integer> output, int n, int ind) {
        if (ind == n) {
            res.add(new ArrayList<>(output)); 
            return;
        }

        helper(nums, res, output, n, ind + 1); // Exclude current element

        output.add(nums[ind]);
        helper(nums, res, output, n, ind + 1); // Include current element
        output.remove(output.size() - 1); // Backtrack
    }

    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        helper(nums, res, new ArrayList<>(), nums.length, 0);
        return res;
    }
}
