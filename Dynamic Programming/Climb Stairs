You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Solution 1 (Recursive)
class Solution {
    public int climbStairs(int n) {
        int[] memo = new int[n+1];
        Arrays.fill(memo, -1);
        return findWays(n, memo);
}

public int findWays(int n, int[] memo)
{
    if(n==0)return 1;
    if(n<0)return 0;
    if(memo[n]!=-1)return memo[n];
    memo[n] = findWays(n-1, memo) + findWays(n-2, memo);
    return memo[n];
}
}

Solution 2 (DP)
class Solution {
    public int climbStairs(int n) {
    int[] dp = new int[n+1];
    dp[0] = 1;
    dp[1] = 1;
    for(int i=2; i<n+1; i++)
    {
        dp[i] = dp[i-1] + dp[i-2];
    }

    return dp[n];
}
}
