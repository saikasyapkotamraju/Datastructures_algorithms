Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

 

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.
 

Constraints:

1 <= strs.length <= 200
0 <= strs[i].length <= 200
strs[i] consists of only lowercase English letters if it is non-empty.

Solution (Naive) : 
class Solution {
    public String longestCommonPrefix(String[] strs) {
        if(strs.length==0)return "";
        if(strs.length==1)return strs[0];

        int n = strs.length;
        String prefix = strs[0];
        String result = "";

        int ind = 0;
        int prefixLength = prefix.length();

        while(ind < prefixLength)
        {
            char prefixChar = prefix.charAt(ind);
            for(int i=1; i<n; i++)
            {
                if(ind >=strs[i].length() || strs[i].charAt(ind)!=prefixChar)
                {
                    return result;
                }
            }
            result += prefixChar;
            ind++;
        }
        
        return result;
    }
}

Solution (Optimised):
class Solution {
    public String longestCommonPrefix(String[] strs) {
        if(strs==null || strs.length==0)return "";
        if(strs.length==1)return strs[0];

        int n = strs.length;
        String prefix = strs[0];
        
        for(int i=1; i<n; i++)
        {
            while(!strs[i].startsWith(prefix))
            {
                prefix = prefix.substring(0, prefix.length()-1);
                if(prefix.length()==0)
                {
                    return "";
                }
            }
        }
        
        return prefix;
    }
}
