Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.
Return the sorted string. If there are multiple answers, return any of them.
Example 1:
Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:
Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:
Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.

Constraints:
1 <= s.length <= 5 * 105
s consists of uppercase and lowercase English letters and digits.

Solution : 
import java.util.*;

class Solution {
    public String frequencySort(String s) {
        if(s==null || s.length()==0)return s;
        
        int[] ascii = new int[256];
        for (char c : s.toCharArray()) {
            ascii[c]++;
        }

        PriorityQueue<int[]> maxHeap = new PriorityQueue<>((a,b)-> b[1]-a[1]);
        for(int i=0; i<255; i++)
        {
            maxHeap.offer(new int[]{i, ascii[i]});
        }

        StringBuilder result = new StringBuilder();

        while(!maxHeap.isEmpty())
        {
            int[] charEle = maxHeap.poll();
            char charac = (char) charEle[0];
            int charFreq = charEle[1];
            while(charFreq-->0)
            {
                result.append(charac);
            }
        }

        return result.toString();

    }
}
