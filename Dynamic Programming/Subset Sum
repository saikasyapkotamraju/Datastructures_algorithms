In a given array, check if there exists a subset whose sum is equal to a given target. 

Solution 1(Recursive) : 

static Boolean isSubsetSum(int arr[], int target) {
        return isSubsetPresent(arr, arr.length, target);
}
    
static Boolean isSubsetPresent(int[] arr, int n, int target)
{
    if(n==0&&target==0)return true;
    if(n==0)return false;
    if(target==0)return true;
    if(arr[n-1]<=target)
    {
        return isSubsetPresent(arr, n-1, target-arr[n-1]) ||
                isSubsetPresent(arr, n-1, target);
    }
    return isSubsetPresent(arr, n-1, target);
}

Solution 2(DP) : 

static Boolean isSubsetSum(int arr[], int target) 
    {
        Boolean[][] dp = new Boolean[arr.length+1][target+1];
        
        for(int i=0; i<target+1; i++)
        {
            dp[0][i] = false;
        }
        
        for(int i=0; i<arr.length+1; i++)
        {
            dp[i][0] = true;
        }
        
        for(int i=1; i<arr.length+1; i++)
        {
            for(int j=1; j<target+1; j++)
            {
                if(arr[i-1]<=j)
                {
                    dp[i][j] = dp[i-1][j] || dp[i-1][j-arr[i-1]];
                }
                else
                {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        
        return dp[arr.length][target];
    }
