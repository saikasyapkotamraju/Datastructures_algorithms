Given a set of items, each with a weight and a value, represented by the array wt and val respectively. Also, a knapsack with a weight limit capacity.
The task is to fill the knapsack in such a way that we can get the maximum profit. Return the maximum profit.
Note: Each item can be taken any number of times.

Solution 1 (Recursive)
static int knapSack(int val[], int wt[], int capacity) {
        return maxValue(val, wt, capacity, wt.length);
    }
    
public static int maxValue(int[] val, int[] wt, int capacity, int n)
{
    if(n==0)return 0;
    if(capacity==0)return 0;
    
    if(wt[n-1]<=capacity)
    {
        return Math.max(maxValue(val, wt, capacity, n-1), 
                        maxValue(val, wt, capacity-wt[n-1], n)+val[n-1]);
    }
    
    return maxValue(val, wt, capacity, n-1);
}

Solution 2 (DP)
class Solution {
    static int knapSack(int val[], int wt[], int capacity) {
        int n = val.length;
        int[][] dp = new int[n+1][capacity+1];

        //Below initialisations are not needed as those are default initialisations in java
        // for(int i=0; i<capacity+1; i++)
        // {
        //     dp[0][i] = 0;
        // }
        // for(int i=0; i<n+1; i++)
        // {
        //     dp[i][0] = 0; 
        // }
        for(int i=1; i<n+1; i++)
        {
            for(int j=1; j<capacity+1; j++)
            {
                if(wt[i-1]<=j)
                {
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-wt[i-1]]+val[i-1]); //Since an item can be added any number of times, if it is considered
                }                                                                //no need to move to before index
                else
                {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        
        return dp[n][capacity];
    }
}
