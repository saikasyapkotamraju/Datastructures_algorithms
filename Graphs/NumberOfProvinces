There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

Solution (DFS) :

class Solution {
    public int findCircleNum(int[][] isConnected) {
        int n = isConnected.length;
        ArrayList<ArrayList<Integer>> adjList = new ArrayList<>();

        for(int i=0; i<n; i++)
        {
            adjList.add(new ArrayList<>());
        }
        
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(isConnected[i][j]==1 && i!=j)
                {
                    adjList.get(i).add(j);
                    adjList.get(j).add(i);
                }
            }
        }

        int result = 0;
        boolean[] visited = new boolean[n];
        for(int i=0; i<n; i++)
        {
            if(!visited[i])
            {
                result++;
                dfs(i, adjList, visited);
            }
        }

        return result;
    }

    public void dfs(int node, ArrayList<ArrayList<Integer>> adjList, boolean[] visited)
    {
        visited[node] = true;
        for(int adjNode : adjList.get(node))
        {
            if(!visited[adjNode])
            {
                dfs(adjNode, adjList, visited);
            }
        }
    }
}
