Given a Directed Acyclic Graph (DAG) of V (0 to V-1) vertices and E edges represented as a 2D vector edges[][], where each entry edges[i] = [u, v] denotes an directed edge u -> v. Return topological sort for the given graph.
Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge u -> v, vertex u comes before v in the ordering.
Note: As there are multiple Topological orders possible, you may return any of them. If your returned Topological sort is correct then the output will be 1 else 0.

Solution :
Topological sort : Linear order of vertices such that if there is a edge from u to v, u should be appear before v(not exactly 1 step before)
                   Topo sort is only possible/valid in DAG
class Solution {
    public static ArrayList<Integer> topoSort(int V, int[][] edges) {
        // code here
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>(edges.length);
        for(int i=0; i<V; i++)adj.add(new ArrayList<>());
        for(int[] edge : edges)
        {
            adj.get(edge[0]).add(edge[1]);
        }
        
        Stack<Integer> st = new Stack<>();
        boolean[] visited = new boolean[V];
        
        for(int i=0; i<V; i++)
        {
            if(!visited[i])
            {
                topoSort(i, adj, visited, st);
            }
        }
        
        ArrayList<Integer> result = new ArrayList<>();
        while(!st.isEmpty())
        {
            result.add(st.pop());
        }
        
        return result;
    }
    
    static void topoSort(int node, ArrayList<ArrayList<Integer>> adj, boolean[] visited, Stack<Integer> st)
    {
        visited[node] = true;
        for(int adjNode : adj.get(node))
        {
            if(!visited[adjNode])
            {
                topoSort(adjNode, adj, visited, st);
            }
        }
        
        st.push(node);
    }
}
