Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

Solution 1 (Recursive with memoisation) :
import java.util.Arrays;
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int[][] memo = new int[n+1][m+1];
        for(int i=0; i<n+1; i++)
        {
            Arrays.fill(memo[i], -1);
        }
        return lcs(text1, text2, n, m, memo);
    }

    public int lcs(String text1, String text2, int n, int m, int[][] memo)
    {
        if(n==0 || m==0)return 0;
        if(memo[n][m]!=-1) return memo[n][m];
        if(text1.charAt(n-1)==text2.charAt(m-1))
        {
            memo[n][m] =  1 + lcs(text1, text2, n-1, m-1, memo);
        }
        else
        {
            memo[n][m] =  Math.max(lcs(text1, text2, n-1, m, memo), 
                        lcs(text1, text2, n, m-1, memo));
        }
        return memo[n][m];
    }
}

Solution 2 (DP):
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length(), m = text2.length();
        int[][] dp = new int[n+1][m+1];
        for(int i=1; i<n+1; i++)
        {
            for(int j=1; j<m+1; j++)
            {
                if(text1.charAt(i-1)==text2.charAt(j-1))
                {
                    dp[i][j] = 1 + dp[i-1][j-1];
                }
                else
                {
                    dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]);
                }
            }
        }

        return dp[n][m];
    }
}
