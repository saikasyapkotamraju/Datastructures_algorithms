Given a pointer/reference to the head of the linked list, the task is to sort the given linked list using Merge Sort.
Note: If the length of the linked list is odd, then the extra node should go into the first list while splitting.

Solution : 

class Solution {
    // Function to sort the given linked list using Merge Sort.
    static Node mergeSort(Node head) {
        // add your code here
        if(head==null || head.next==null)return head;
        
        Node slow = head, fast = head;
        while(fast!=null && fast.next!=null && fast.next.next!=null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        Node head2 = slow.next;
        slow.next = null;
        Node sortedHead1 = mergeSort(head);
        Node sortedHead2 = mergeSort(head2);
        Node ptr1 = sortedHead1, ptr2 = sortedHead2;
        Node dummy = new Node(-1);
        Node resultHead = dummy;
        while(ptr1!=null && ptr2!=null)
        {
            if(ptr1.data>=ptr2.data)
            {
                dummy.next = ptr2;
                ptr2 = ptr2.next;
            }
            else
            {
                dummy.next = ptr1;
                ptr1 = ptr1.next;
            }
            dummy = dummy.next;
        }
        while(ptr1!=null)
        {
            dummy.next = ptr1;
            dummy = dummy.next;
            ptr1 = ptr1.next;
        }
        while(ptr2!=null)
        {
            dummy.next = ptr2;
            dummy = dummy.next;
            ptr2 = ptr2.next;
        }
        return resultHead.next;
    }
}
