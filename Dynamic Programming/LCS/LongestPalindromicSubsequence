Given a string s, find the longest palindromic subsequence's length in s.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: s = "bbbab"
Output: 4
Explanation: One possible longest palindromic subsequence is "bbbb".
Example 2:

Input: s = "cbbd"
Output: 2
Explanation: One possible longest palindromic subsequence is "bb".


Solution 1 (Recursion with memoisation)
import java.util.Arrays;
class Solution {
    public int longestPalindromeSubseq(String s) {
        int n = s.length();
        int[][] memo = new int[n][n];
        for(int i=0; i<n; i++)
        {
            Arrays.fill(memo[i], -1);
        }
        return lps(s, 0, n-1, memo);
    }

    public int lps(String s, int start, int end, int[][] memo)
    {
        if(start==s.length() || end==-1)return 0;
        if(memo[start][end]!=-1)return memo[start][end];
        if(s.charAt(start)==s.charAt(end))
        {
            memo[start][end] = 1 + lps(s, start+1, end-1, memo);
        }
        else
        {
            memo[start][end] = Math.max(lps(s, start+1, end, memo), 
                                        lps(s, start, end-1, memo));
        }
        return memo[start][end];
    }

}

Solution 2(DP):

class Solution {
    public int longestPalindromeSubseq(String s) {
        int n = s.length();
        int[][] dp = new int[n+1][n+1];
        for(int i=1; i<n+1; i++)
        {
            for(int j=n-1; j>=0; j--)
            {
                if(s.charAt(i-1)==s.charAt(j))
                {
                    dp[i][j] = 1 + dp[i-1][j+1];
                }
                else
                {
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j+1]);
                }
            }
        }

        return dp[n][0];
    }
}
