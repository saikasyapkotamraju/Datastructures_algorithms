Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), 
construct the tree and return its root.

It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.

A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, 
and any descendant of Node.right has a value strictly greater than Node.val.

A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.

Solution : 

class Solution {
    int index = 0;
    public TreeNode bstFromPreorder(int[] preorder) {
        return helper(preorder, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }
    public TreeNode helper(int[] preorder, int min, int max)
    {
        if(index>=preorder.length)return null;
        int value = preorder[index];
        if(value<=min || value>=max)return null;
        TreeNode root = new TreeNode(value);
        index++;
        root.left = helper(preorder,  min, value);
        root.right = helper(preorder, value, max);
        return root;
    }
}
