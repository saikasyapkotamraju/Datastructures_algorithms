There is BST given with the root node with the key part as an integer only. You need to find the in-order successor and predecessor of a given key. 
If either predecessor or successor is not found, then set it to NULL.
Note:- In an inorder traversal the number just smaller than the target is the predecessor and the number just greater than the target is the successor. 

Note : Predessor is the highest value among the smallest nodes to key, successor is the lowest value among the largest nodes to key

Solution 1 (with extra space):

class Solution {
    public static void findPreSuc(Node root, Node[] pre, Node[] suc, int key) {
        // code here.
        // update pre[0] with the predecessor of the key
        // update suc[0] with the successor of the key
        ArrayList<Node> list = new ArrayList<>();
        inOrder(root, list);
        for(int i=0; i<list.size(); i++)
        {
            if(list.get(i).data<key)
            {
                pre[0] = list.get(i);
            }
            else if(list.get(i).data>key)
            {
                suc[0] = list.get(i);
                return ;
            }
        }
    }
    
    public static void inOrder(Node root, ArrayList<Node> list)
    {
        if(root==null)return;
        inOrder(root.left, list);
        list.add(root);
        inOrder(root.right, list);
    }
}

Soluiton 2 (recursive, without extra space) :

class Solution {
    public static void findPreSuc(Node root, Node[] pre, Node[] suc, int key) {
        // code here.
        // update pre[0] with the predecessor of the key
        // update suc[0] with the successor of the key
        if(root==null)return;
        findPredessor(root, pre, suc, key);
        findSuccessor(root, pre, suc, key);
    }
    public static void findPredessor(Node root, Node[] pre, Node[] suc, int key)
    {
        while(root!=null)
        {
            if(root.data<key)
            {
                pre[0] = root;
                root = root.right;
            }
            else
            {
                root = root.left;
            }
        }
    }
    public static void findSuccessor(Node root, Node[] pre, Node[] suc, int key)
    {
        while(root!=null)
        {
            if(root.data>key)
            {
                suc[0] = root;
                root = root.left;
            }
            else
            {
                root = root.right;
            }
        }
    }
}
