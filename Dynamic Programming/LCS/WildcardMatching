Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Solution 1 (Recursive with memoisation)
import java.util.*;
class Solution {
    public boolean isMatch(String s, String p) {
        int n = s.length(), m = p.length();
        boolean[][] memo = new boolean[n+1][m+1];
        boolean[][] computed = new boolean[n+1][m+1];
        return helper(s, p, n, m, memo, computed);
    }

    public boolean helper(String s, String p, int n, int m, boolean[][] memo, boolean[][] computed)
    {
        if(n==0 && m==0)
        {
            return true;
        }
        if(n>0 && m==0)
        {
            return false;
        }
        if(n==0 && m>0)
        {
            memo[n][m] = true;
            for (int i = 0; i < m; i++) //If string is empty and remaning pattern is having all stars then it is true(matched)
            {
                if (p.charAt(i) != '*') 
                {
                    memo[n][m] = false;
                    break;
                }
            }
            return memo[n][m];
        }

        if(computed[n][m])
        {
            return memo[n][m];
        }

        if(s.charAt(n-1)==p.charAt(m-1) || p.charAt(m-1)=='?')
        {
            memo[n][m] =  helper(s, p, n-1, m-1, memo, computed);
        }
        else if(p.charAt(m-1)=='*')
        {
            memo[n][m] = helper(s, p, n, m-1, memo, computed) || helper(s, p, n-1, m, memo, computed);
        }   //Omit * and check remaining pattern matches string(ex : a and a*)  //Check if * matches more than 1 character(ex: adb and a*)
        else
        {
            memo[n][m] = false;
        }
        computed[n][m] = true;
        return memo[n][m];
    }
}

Solution 2 (DP)
class Solution {
    public boolean isMatch(String s, String p) {
        int n = s.length(), m = p.length();
        boolean[][] dp = new boolean[n+1][m+1];
        dp[0][0] = true;
        for(int i=1; i<m+1; i++)
        {
            if(p.charAt(i-1)=='*')
            {
                dp[0][i] = dp[0][i-1];
            }
        }
        for(int i=1; i<n+1; i++)
        {
            for(int j=1; j<m+1; j++)
            {
                if(s.charAt(i-1)==p.charAt(j-1) || p.charAt(j-1)=='?')
                {
                    dp[i][j] = dp[i-1][j-1]; 
                }
                else if(p.charAt(j-1)=='*')
                {
                    dp[i][j] = dp[i][j-1] || dp[i-1][j];
                }
                else
                {
                    dp[i][j] = false;
                }
            }
        }

        return dp[n][m];
    }
}
