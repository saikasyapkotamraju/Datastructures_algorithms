Given an integer array nums, return the length of the longest strictly increasing 
subsequence
.

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4
Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1

Solution 1(Recusrion with memoisation)
import java.util.*;
class Solution {
    public int lengthOfLIS(int[] nums) {
        int maxLength = Integer.MIN_VALUE;
        int[] memo = new int[nums.length];
        Arrays.fill(memo, -1);
        for(int i=0; i<nums.length; i++)
        {
            maxLength = Math.max(maxLength, lengthOfLISHelper(nums, i, memo));
        }
        return maxLength;
    }

    public int lengthOfLISHelper(int[] nums, int index, int[] memo)
    {
        if(memo[index]!=-1)return memo[index];
        int maxLen = 1;
        for(int i=0; i<index; i++)
        {
            if(nums[index] > nums[i])
            {
                maxLen = Math.max(maxLen, lengthOfLISHelper(nums, i, memo)+1);
            }
        }
        memo[index] = maxLen;
        return maxLen;
    }
}


Solution 2(DP):
import java.util.*;
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        if(n==0 || n==1)return n;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        int result = Integer.MIN_VALUE;
        for(int i=1; i<n; i++)
        {
            for(int j=0; j<i; j++)
            {
                if(nums[i] > nums[j])
                {
                    dp[i] = Math.max(dp[i], dp[j]+1);
                }
            }
            result = Math.max(result, dp[i]);
        }

        return result;
    }
}
