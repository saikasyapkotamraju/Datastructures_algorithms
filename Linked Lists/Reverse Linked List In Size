class Solution {
    public static Node reverse(Node node, int k) {
        // Your code here
        if(node == null || node.next==null)return node;
        Node currHead = node, prevHead = null, nxtHead = null, revHead = null;
        Node finalHead = null;
        while(currHead!=null)
        {
            int p = k;
            Node temp = currHead;
            while(p-->1)
            {
                if(temp!=null)
                {
                    temp = temp.next;
                }
                else
                {
                    break;
                }
            }
            if(temp!=null)  //If temp is not null store next head and break the curr group link to the next group
            {
                nxtHead = temp.next;
                temp.next = null;
            }
            else
            {
                nxtHead = null;
            }
            
            
            revHead = reverse(currHead);
            
            if(finalHead==null) //Store first reverse head to return as output
            {
                finalHead = revHead;
            }
            
            if(prevHead==null) //If prev head is not null link prev head to reversed head and update prev head to curr head
            {
                prevHead = currHead;
            }
            else
            {
                prevHead.next = revHead;
                prevHead = currHead;
            }
            
            currHead = nxtHead; //Update curr head to next head
        }
        
        return finalHead;
    }
    
    public static Node reverse(Node currHead)
    {
        if(currHead==null || currHead.next==null)
        {
            return currHead;
        }
        Node prev = null, curr = currHead, nxt = null;
        while(curr!=null)
        {
            nxt = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nxt;
        }
        return prev;
    }
}
