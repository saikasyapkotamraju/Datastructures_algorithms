Given a linked list where nodes can contain values 0s, 1s, and 2s only. The task is to segregate 0s, 1s, and 2s linked list such that all zeros segregate to the head side, 2s at the end of the linked list, and 1s in the middle of 0s and 2s.

Solution
class Solution {
    // Function to sort a linked list of 0s, 1s and 2s.
    static Node segregate(Node head) {
        Node zeroHead = new Node(-1);
        Node zeroTail = zeroHead;
        
        Node oneHead = new Node(-1);
        Node oneTail = oneHead;
        
        Node twoHead = new Node(-1);
        Node twoTail = twoHead;
        
        Node cur = head;
        while(cur!=null)
        {
            int curVal = cur.data;
            switch(curVal)
            {
                case 0 :
                    zeroTail.next = cur;
                    zeroTail = zeroTail.next;
                    break;
                case 1 :
                    oneTail.next = cur;
                    oneTail = oneTail.next;
                    break;
                case 2 :
                    twoTail.next = cur;
                    twoTail = twoTail.next;
                    break;
            }
            cur = cur.next;
        }
        

        if(oneHead.next!=null)
        {
            zeroTail.next = oneHead.next;
            oneTail.next = twoHead.next;
        }
        else
        {
            zeroTail.next = twoHead.next;
        }
        
        twoTail.next = null;
        
        if(zeroHead.next!=null)return zeroHead.next;
        else if(oneHead.next!=null)return oneHead.next;
        
        return twoHead.next;
    }
}
