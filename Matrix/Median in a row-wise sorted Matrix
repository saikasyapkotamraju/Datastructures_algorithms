Given a row wise sorted matrix of size R*C where R and C are always odd, find the median of the matrix.

Solution : 
Find overall min & max values in the matrix that is our search space. Now for every mid in this range count number of elements less than or equal to
mid. If that count is less than desired count then move search space to right else move to left.

class Solution {
    int median(int matrix[][], int R, int C) {
        // code here 
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        
        for(int i=0; i<R; i++)
        {
            if(matrix[i][0]<min)min = matrix[i][0];
            if(matrix[i][C-1]>max)max = matrix[i][C-1];
        }
        
        int desiredCount = (R*C + 1)/2;
        
        while(min <= max)
        {
            int mid = (min + max)/2;
            int count = 0;
            for(int i=0; i<R; i++)
            {
                count += upperBound(matrix[i], mid);
            }
            if(count < desiredCount)
            {
                min = mid + 1;
            }
            else
            {
                max = mid - 1;
            }
        }
        return min;
    }
    public int upperBound(int[] arr, int target)
    {
        int left = 0, right = arr.length-1;
        while(left<=right)
        {
            int mid = (left+right)/2;
            if(arr[mid]<=target)
            {
                left = mid+1;
            }
            else
            {
                right = mid - 1;
            }
        }
        return left;
    }
}
